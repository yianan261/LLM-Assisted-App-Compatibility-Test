name: Continuous Integration and Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U testuser -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name postgres

    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      GCP_STORAGE_BUCKET: ${{ secrets.GCP_STORAGE_BUCKET }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Decode GCP Credentials and move into Workspace
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        run: |
          mkdir -p ${{ github.workspace }}/backend
          echo "$GCP_CREDENTIALS" | base64 -d > ${{ github.workspace }}/backend/app-compat-test.json
      - name: Set Google Application Credentials
        run: echo "GOOGLE_APPLICATION_CREDENTIALS=${{ github.workspace }}/backend/app-compat-test.json" >> $GITHUB_ENV
      - name: Install PostgreSQL client
        run: sudo apt-get install -y postgresql-client
      - name: Ensure PostgreSQL is ready
        run: |
          for i in {1..10}; do
            pg_isready -h localhost -p 5432 && echo "Postgres is ready!" && break
            echo "Waiting for Postgres to be ready..."
            sleep 5
          done
      - name: Test PostgreSQL connection
        run: |
          PGPASSWORD=testpassword psql -h localhost -p 5432 -U testuser -d testdb -c "SELECT 1"
      - name: list files in workspace
        run: ls
      - name: list current directory path in workspace
        run: pwd
      - name: Test Django unit tests
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/backend
          export DJANGO_SETTINGS_MODULE=cfehome.settings_ci
          echo "Using settings: $DJANGO_SETTINGS_MODULE"
          cd backend
          python manage.py test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Decode GCP Credentials
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        run: |
          echo "$GCP_CREDENTIALS" | base64 -d > "$HOME/app-compat-test.json"
      - name: Move GCP Credentials into Workspace
        run: mv "$HOME/app-compat-test.json" "${{ github.workspace }}"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Display Dockerfile
        run: cat Dockerfile
      - name: list files in backend and current directories
        run: |
          cd backend
          ls
          cd ..
          ls
      - name: list current directory path
        run: pwd
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: chenyian261/llm-app-compat:latest
          platforms: linux/amd64, linux/arm64
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-2"
      - name: New deployment of ECS Service
        if: github.ref == 'refs/heads/main'
        run: |
          aws ecs update-service --cluster llm-app-cluster2 --service llm-app-service2 --force-new-deployment
